{"version":3,"sources":["webpack:///./assets/js/theme/auth.js","webpack:///./assets/js/theme/common/form-validation.js?fa07"],"names":["Auth","formCreateSelector","registerLoginValidation","$loginForm","loginModel","forms","loginValidator","nod","submit","add","selector","validate","cb","val","result","email","errorMessage","password","event","performCheck","areAll","preventDefault","registerForgotPasswordValidation","$forgotPasswordForm","forgotPasswordValidator","registerNewPasswordValidation","newPasswordForm","newPasswordValidator","$","passwordSelector","password2Selector","Validators","setPasswordValidation","passwordRequirements","registerCreateAccountValidator","$createAccountForm","validationModel","validation","createAccountValidator","$stateElement","emailSelector","$emailElement","$passwordElement","$password2Element","$last","stateCountry","context","err","field","Error","$field","getStatus","remove","is","setStateCountryValidation","cleanUpStateValidation","setEmailValidation","loaded","next","classifyForm","$newPasswordForm","length","PageManager","buildDateValidation","$formField","min_date","max_date","invalidMessage","formElementId","attr","minSplit","split","maxSplit","minDate","Date","maxDate","triggeredBy","day","Number","find","month","year","chosenDate","buildRequiredCheckboxValidation","formFieldId","primarySelector","secondarySelector","each","index","checkbox","checked","label","buildRequiredValidation","buildNumberRangeValidation","formFieldSelector","min","max","name","numberVal","buildValidation","$validateableElement","data","fieldValidations","type","dateValidation","push","required","element","$inputElement","tagName","get","inputName","elementSelector","$form","validationsToPerform","input","concat"],"mappings":"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","file":"theme-bundle.chunk.8.js","sourcesContent":["import PageManager from './page-manager';\nimport stateCountry from './common/state-country';\nimport $ from 'jquery';\nimport nod from './common/nod';\nimport validation from './common/form-validation';\nimport forms from './common/models/forms';\nimport { classifyForm, Validators } from './common/form-utils';\n\nexport default class Auth extends PageManager {\n    constructor() {\n        super();\n        this.formCreateSelector = 'form[data-create-account-form]';\n    }\n\n    registerLoginValidation($loginForm) {\n        const loginModel = forms;\n\n        this.loginValidator = nod({\n            submit: '.login-form input[type=\"submit\"]',\n        });\n\n        this.loginValidator.add([\n            {\n                selector: '.login-form input[name=\"login_email\"]',\n                validate: (cb, val) => {\n                    const result = loginModel.email(val);\n\n                    cb(result);\n                },\n                errorMessage: 'Please use a valid email address, such as user@example.com.',\n            },\n            {\n                selector: '.login-form input[name=\"login_pass\"]',\n                validate: (cb, val) => {\n                    const result = loginModel.password(val);\n\n                    cb(result);\n                },\n                errorMessage: 'You must enter a password.',\n            },\n        ]);\n\n        $loginForm.submit((event) => {\n            this.loginValidator.performCheck();\n\n            if (this.loginValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    registerForgotPasswordValidation($forgotPasswordForm) {\n        this.forgotPasswordValidator = nod({\n            submit: '.forgot-password-form input[type=\"submit\"]',\n        });\n\n        this.forgotPasswordValidator.add([\n            {\n                selector: '.forgot-password-form input[name=\"email\"]',\n                validate: (cb, val) => {\n                    const result = forms.email(val);\n\n                    cb(result);\n                },\n                errorMessage: 'Please use a valid email address, such as user@example.com.',\n            },\n        ]);\n\n        $forgotPasswordForm.submit((event) => {\n            this.forgotPasswordValidator.performCheck();\n\n            if (this.forgotPasswordValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    registerNewPasswordValidation() {\n        const newPasswordForm = '.new-password-form';\n        const newPasswordValidator = nod({\n            submit: $(`${newPasswordForm} input[type=\"submit\"]`),\n        });\n        const passwordSelector = $(`${newPasswordForm} input[name=\"password\"]`);\n        const password2Selector = $(`${newPasswordForm} input[name=\"password_confirm\"]`);\n\n        Validators.setPasswordValidation(\n            newPasswordValidator,\n            passwordSelector,\n            password2Selector,\n            this.passwordRequirements\n        );\n    }\n\n    registerCreateAccountValidator($createAccountForm) {\n        const validationModel = validation($createAccountForm);\n        const createAccountValidator = nod({\n            submit: `${this.formCreateSelector} input[type='submit']`,\n        });\n        const $stateElement = $('[data-field-type=\"State\"]');\n        const emailSelector = `${this.formCreateSelector} [data-field-type='EmailAddress']`;\n        const $emailElement = $(emailSelector);\n        const passwordSelector = `${this.formCreateSelector} [data-field-type='Password']`;\n        const $passwordElement = $(passwordSelector);\n        const password2Selector = `${this.formCreateSelector} [data-field-type='ConfirmPassword']`;\n        const $password2Element = $(password2Selector);\n\n        createAccountValidator.add(validationModel);\n\n        if ($stateElement) {\n            let $last;\n\n            // Requests the states for a country with AJAX\n            stateCountry($stateElement, this.context, (err, field) => {\n                if (err) {\n                    throw new Error(err);\n                }\n\n                const $field = $(field);\n\n                if (createAccountValidator.getStatus($stateElement) !== 'undefined') {\n                    createAccountValidator.remove($stateElement);\n                }\n\n                if ($last) {\n                    createAccountValidator.remove($last);\n                }\n\n                if ($field.is('select')) {\n                    $last = field;\n                    Validators.setStateCountryValidation(createAccountValidator, field);\n                } else {\n                    Validators.cleanUpStateValidation(field);\n                }\n            });\n        }\n\n        if ($emailElement) {\n            createAccountValidator.remove(emailSelector);\n            Validators.setEmailValidation(createAccountValidator, emailSelector);\n        }\n\n        if ($passwordElement && $password2Element) {\n            createAccountValidator.remove(passwordSelector);\n            createAccountValidator.remove(password2Selector);\n            Validators.setPasswordValidation(\n                createAccountValidator,\n                passwordSelector,\n                password2Selector,\n                this.passwordRequirements\n            );\n        }\n\n        $createAccountForm.submit((event) => {\n            createAccountValidator.performCheck();\n\n            if (createAccountValidator.areAll('valid')) {\n                return;\n            }\n\n            event.preventDefault();\n        });\n    }\n\n    /**\n     * Request is made in this function to the remote endpoint and pulls back the states for country.\n     * @param next\n     */\n    loaded(next) {\n        const $createAccountForm = classifyForm(this.formCreateSelector);\n        const $loginForm = classifyForm('.login-form');\n        const $forgotPasswordForm = classifyForm('.forgot-password-form');\n        const $newPasswordForm = classifyForm('.new-password-form'); // reset password\n\n        // Injected via auth.html\n        this.passwordRequirements = this.context.passwordRequirements;\n\n        if ($loginForm.length) {\n            this.registerLoginValidation($loginForm);\n        }\n\n        if ($newPasswordForm.length) {\n            this.registerNewPasswordValidation();\n        }\n\n        if ($forgotPasswordForm.length) {\n            this.registerForgotPasswordValidation($forgotPasswordForm);\n        }\n\n        if ($createAccountForm.length) {\n            this.registerCreateAccountValidator($createAccountForm);\n        }\n\n        next();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./assets/js/theme/auth.js","import $ from 'jquery';\n\n/**\n * Validate that the given date for the day/month/year select inputs is within potential range\n * @param $formField\n * @param validation\n * @returns {{selector: string, triggeredBy: string, validate: Function, errorMessage: string}}\n */\nfunction buildDateValidation($formField, validation) {\n    // No date range restriction, skip\n    if (validation.min_date && validation.max_date) {\n        const invalidMessage = `Your chosen date must fall between ${validation.min_date} and ${validation.max_date}.`;\n        const formElementId = $formField.attr('id');\n        const minSplit = validation.min_date.split('-');\n        const maxSplit = validation.max_date.split('-');\n        const minDate = new Date(minSplit[0], minSplit[1] - 1, minSplit[2]);\n        const maxDate = new Date(maxSplit[0], maxSplit[1] - 1, maxSplit[2]);\n\n        return {\n            selector: `#${formElementId} select[data-label=\"year\"]`,\n            triggeredBy: `#${formElementId} select:not([data-label=\"year\"])`,\n            validate: (cb, val) => {\n                const day = Number($formField.find('select[data-label=\"day\"]').val());\n                const month = Number($formField.find('select[data-label=\"month\"]').val()) - 1;\n                const year = Number(val);\n                const chosenDate = new Date(year, month, day);\n\n                cb(chosenDate >= minDate && chosenDate <= maxDate);\n            },\n            errorMessage: invalidMessage,\n        };\n    }\n}\n\n/**\n * We validate checkboxes separately from single input fields, as they must have at least one checked option\n * from many different inputs\n * @param $formField\n * @param validation\n */\nfunction buildRequiredCheckboxValidation($formField, validation) {\n    const formFieldId = $formField.attr('id');\n    const primarySelector = `#${formFieldId} input:first-of-type`;\n    const secondarySelector = `#${formFieldId} input`;\n\n    return {\n        selector: primarySelector,\n        triggeredBy: secondarySelector,\n        validate: (cb) => {\n            let result = false;\n\n            $(secondarySelector).each((index, checkbox) => {\n                if (checkbox.checked) {\n                    result = true;\n\n                    return false;\n                }\n            });\n\n            cb(result);\n        },\n        errorMessage: `The '${validation.label}' field cannot be blank.`,\n    };\n}\n\nfunction buildRequiredValidation(validation, selector) {\n    return {\n        selector,\n        validate(cb, val) {\n            cb(val.length > 0);\n        },\n        errorMessage: `The '${validation.label}' field cannot be blank.`,\n    };\n}\n\nfunction buildNumberRangeValidation(validation, formFieldSelector) {\n    const invalidMessage = `The value for ${validation.label} must be between ${validation.min} and ${validation.max}.`;\n    const min = Number(validation.min);\n    const max = Number(validation.max);\n\n    return {\n        selector: `${formFieldSelector} input[name=\"${validation.name}\"]`,\n        validate: (cb, val) => {\n            const numberVal = Number(val);\n\n            cb(numberVal >= min && numberVal <= max);\n        },\n        errorMessage: invalidMessage,\n    };\n}\n\n\nfunction buildValidation($validateableElement) {\n    const validation = $validateableElement.data('validation');\n    const fieldValidations = [];\n    const formFieldSelector = `#${$validateableElement.attr('id')}`;\n\n    if (validation.type === 'datechooser') {\n        const dateValidation = buildDateValidation($validateableElement, validation);\n\n        if (dateValidation) {\n            fieldValidations.push(dateValidation);\n        }\n    } else if (validation.required && (validation.type === 'checkboxselect' || validation.type === 'radioselect')) {\n        fieldValidations.push(buildRequiredCheckboxValidation($validateableElement, validation));\n    } else {\n        $validateableElement.find('input, select, textarea').each((index, element) => {\n            const $inputElement = $(element);\n            const tagName = $inputElement.get(0).tagName;\n            const inputName = $inputElement.attr('name');\n            const elementSelector = `${formFieldSelector} ${tagName}[name=\"${inputName}\"]`;\n\n            if (validation.type === 'numberonly') {\n                fieldValidations.push(buildNumberRangeValidation(validation, formFieldSelector));\n            }\n            if (validation.required) {\n                fieldValidations.push(buildRequiredValidation(validation, elementSelector));\n            }\n        });\n    }\n\n    return fieldValidations;\n}\n\n/**\n * Builds the validation model for dynamic forms\n * @param $form\n * @returns {Array}\n */\nexport default function ($form) {\n    let validationsToPerform = [];\n\n    $form.find('[data-validation]').each((index, input) => {\n        validationsToPerform = validationsToPerform.concat(buildValidation($(input)));\n    });\n\n    return validationsToPerform;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./assets/js/theme/common/form-validation.js"],"sourceRoot":""}